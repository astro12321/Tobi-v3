from Packet import *
from UI.MainWindowUI import *
from UI.PacketWindowUI import *
from UI.AddFilterUI import *

from PySide2 import QtGui
from multiprocessing import Queue

#Receive packets and analyze them
class Model:
    def __init__(self):
        self.packetQueue = list()

    def addPkt(self, pkt: Packet):
        self.packetQueue.append(pkt)

    def getPkt(self, ind=-1) -> Packet:
        if ind < 0 or ind > len(self.packetQueue) - 1:
            return None
        return self.packetQueue[ind]


#Receive data and modify the View
class Controller:
    def __init__(self, model: Model, filterQueue):
        self.model = model
        self.filterQueue = filterQueue
        self.view = None
        self.updateView = True

    def addPkt(self, buffer: bytes):
        pkt = Packet(buffer, len(self.model.packetQueue) + 1)

        #Modify model
        self.model.addPkt(pkt)
        #Modify view 
        if self.updateView:
            self.view.addItemToPacketsListView(f"{pkt.index}. {pkt.resume()}")

    def isPktQueueEmpty(self) -> bool:
        if self.model.packetQueue:
            return False
        return True

    def getPkt(self, ind=-1) -> Packet:
        return self.model.getPkt(ind)

    def setView(self, view):
        self.view = view

    def toggleUpdateView(self) -> bool:
        self.updateView = not self.updateView
        return self.updateView

    def addFilter(self, filter: str):
        self.filterQueue.put(filter)

        item = QtGui.QStandardItem(filter)
        self.view.filtersListViewModel.appendRow(item)
        self.view.filtersListView.scrollToBottom()

    



#This add and modify functions to the UI class generated by QTDesigner
class View(MainWindowUI):
    def __init__(self, controller):
        super().__init__()

        self.controller = controller

    def setupUi(self, Dialog, width=700, height=600):
        super().setupUi(Dialog, width, height)

        #Set model on packet list view
        self.packetsListViewModel = QtGui.QStandardItemModel()
        self.packetsListView.setModel(self.packetsListViewModel)

        #Set model on filters list view
        self.filtersListViewModel = QtGui.QStandardItemModel()
        self.filtersListView.setModel(self.filtersListViewModel)

        #Sets function on button to open packet
        self.openPacketButton.clicked.connect(self.popUpPacket)

        #Sets function on button to toggle capture
        self.startCaptureButton.clicked.connect(self.toggleUpdateView)

        #Sets function on button to add filter
        self.addFilterButton.clicked.connect(self.popUpAddFilter)

    #Create the function to popup a window with the packet info
    def popUpPacket(self):
        if not self.controller.isPktQueueEmpty():
            pktIndex = int(self.packetsListView.currentIndex().data().split('.')[0]) - 1 #Only takes the first character of the line, which is the index of the packet in the queue
            pkt = self.controller.getPkt(pktIndex) #Not sure if this call respect MVC...
            if pkt: #If there's a packet and the controller didn't return None
                self.popUpwindow = QWidget()
                packetWindowObj = PacketWindow(self.popUpwindow, pkt) 
                packetWindowObj.setupUi(self.popUpwindow)
                self.popUpwindow.show()

    #Toggle the packet capture (only in the UI)
    def toggleUpdateView(self):
        toggleState = self.controller.toggleUpdateView()

        if toggleState:
            self.startCaptureButton.setText("STOP")
        elif not toggleState:
            self.startCaptureButton.setText("START")

    def addItemToPacketsListView(self, desc: str):
        #if self.packetsListViewModel.rowCount() > 10: #Clear the listview if there's too much items
        #    self.packetsListViewModel.clear()
        item = QtGui.QStandardItem(desc)
        self.packetsListViewModel.appendRow(item)
        self.packetsListView.scrollToBottom()

    def popUpAddFilter(self):
        self.addFilterWindow = QWidget()
        self.addFilterObj = AddFilter(self.addFilterWindow, self.controller) 
        self.addFilterObj.setupUi(self.addFilterWindow)
        self.addFilterWindow.show()


class PacketWindow(PacketWindowUI):
    def __init__(self, window, pkt):
        super().__init__()

        self.window = window
        self.pkt = pkt

    def setupUi(self, Dialog):
        super().setupUi(Dialog)

        #Modify packet text
        self.contentTextEdit.textCursor().insertText(self.pkt.show(dump=True))

        #The close button closes the window
        self.closeButton.clicked.connect(self.window.close)

    def retranslateUi(self, Dialog):
        super().retranslateUi(Dialog)

        #Set the window title
        Dialog.setWindowTitle(QCoreApplication.translate("Dialog", f"Packet {self.pkt.index}", None))


class AddFilter(AddFilterUI):
    def __init__(self, window, controller: Controller):
        super().__init__()

        self.controller = controller
        self.window = window

    def setupUi(self, Dialog):
        super().setupUi(Dialog)

        self.addFilterButton.clicked.connect(self.addFilter)

    def addFilter(self):
        filter = self.addFilterLineEdit.text()
        self.controller.addFilter(filter)
        self.window.close()

    