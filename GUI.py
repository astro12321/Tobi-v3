from Packet import *
from MainWindowUI import *
from PacketWindowUI import *

from PySide2 import QtGui

from multiprocessing import Queue


#Receive packets and analyze them
class Model:
    def __init__(self, queue):
        #self.queue = Queue()
        self.queue = queue

    def addPkt(self, buffer: bytes):
        pkt = Packet(1, buffer) #len(self.queue) + 1
        self.queue.put(buffer)

    def getPkt(self, ind=-1) -> Packet: #The item in the queue cannot be pop(), because this function is called by 2 classes
        #print("asddas")
        #sys.exit(0)
        return self.queue.get(ind)


#Receive data and modify the View
class Controller:
    def __init__(self, model: Model):
        self.model = model
        self.view = None
        

    def notifyItemAdded(self):
        #pkt = self.model.getPkt()

        #If there's to much request, the program will slow drastically, this condition make sure everything runs smooth
        #BUT, having this condition crashes the program... So there would need to be a small sleep (which would only slow the interface, but not the traffic)
        #but having that sleep also seems to slow the traffic, even if it's another thread... which is strange... might need to see multiprocessing instead of threading
        #if self.view.packetsListViewModel.rowCount() > 5:
        #    self.view.packetsListViewModel.removeRow(0)

        item = QtGui.QStandardItem("sdaasd")
        self.view.packetsListViewModel.appendRow(item)

    def isPktQueueEmpty(self) -> bool:
        if self.model.queue:
            return False
        return True

    def getPkt(self, ind=-1) -> Packet: #The item in the queue cannot be pop(), because this function is called by 2 classes
        self.view.packetsListViewModel.appendRow(QtGui.QStandardItem("adsdsadd"))
        #return self.model.getPkt(ind)

    def setView(self, view):
        self.view = view


#This add and modify functions to the UI class generated by QTDesigner
class View(MainWindowUI):
    def __init__(self, controller):
        super().__init__()

        self.controller = controller

    def setupUi(self, Dialog, width=700, height=600):
        super().setupUi(Dialog, width, height)

        #Set model on list view
        self.packetsListViewModel = QtGui.QStandardItemModel()
        self.packetsListView.setModel(self.packetsListViewModel)

        #Set function on button to open packet
        self.openPacketButton.clicked.connect(self.popUpPacket)

    #Create the function to popup a window with the packet info
    def popUpPacket(self):
        if not self.controller.isPktQueueEmpty():
            pktIndex = self.packetsListView.currentIndex().row()
            pkt = self.controller.getPkt(pktIndex)
            self.popUpwindow = QWidget()
            self.p = PacketWindow(self.popUpwindow, pkt) 
            self.p.setupUi(self.popUpwindow)
            self.popUpwindow.show()


class PacketWindow(PacketWindowUI):
    def __init__(self, window, pkt):
        super().__init__()

        self.window = window
        self.pkt = pkt

    def setupUi(self, Dialog):
        super().setupUi(Dialog)

        #Modify packet text
        self.contentTextEdit.textCursor().insertText(self.pkt.show(dump=True))

    def retranslateUi(self, Dialog):
        super().retranslateUi(Dialog)

        #Set the window title
        Dialog.setWindowTitle(QCoreApplication.translate("Dialog", f"Packet {self.pkt.index}", None))