from Packet import *
from UI.MainWindowUI import *
from UI.PacketWindowUI import *

from PySide2 import QtGui


#Receive packets and analyze them
class Model:
    def __init__(self):
        self.queue = list()

    def addPkt(self, pkt: Packet):
        self.queue.append(pkt)

    def getPkt(self, ind=-1) -> Packet:
        if ind < 0 or ind > len(self.queue) - 1:
            return None
        return self.queue[ind]


#Receive data and modify the View
class Controller:
    def __init__(self, model: Model):
        self.model = model
        self.view = None
        self.updateView = True

    def addPkt(self, buffer: bytes):
        pkt = Packet(buffer, len(self.model.queue) + 1)

        #Modify model
        self.model.addPkt(pkt)
        #Modify view 
        if self.updateView:
            self.view.addItemToPacketsListView(f"{pkt.index}. {pkt.resume()}")

    def isPktQueueEmpty(self) -> bool:
        if self.model.queue:
            return False
        return True

    def getPkt(self, ind=-1) -> Packet:
        return self.model.getPkt(ind)

    def setView(self, view):
        self.view = view

    def toggleUpdateView(self) -> bool:
        self.updateView = not self.updateView
        return self.updateView


#This add and modify functions to the UI class generated by QTDesigner
class View(MainWindowUI):
    def __init__(self, controller):
        super().__init__()

        self.controller = controller

    def setupUi(self, Dialog, width=700, height=600):
        super().setupUi(Dialog, width, height)

        #Set model on list view
        self.packetsListViewModel = QtGui.QStandardItemModel()
        self.packetsListView.setModel(self.packetsListViewModel)

        #Sets function on button to open packet
        self.openPacketButton.clicked.connect(self.popUpPacket)

        #Sets function on button to toggle capture
        self.startCaptureButton.clicked.connect(self.toggleUpdateView)

    #Create the function to popup a window with the packet info
    def popUpPacket(self):
        if not self.controller.isPktQueueEmpty():
            pktIndex = int(self.packetsListView.currentIndex().data().split('.')[0]) - 1 #Only takes the first character of the line, which is the index of the packet in the queue
            pkt = self.controller.getPkt(pktIndex) #Not sure if this call respect MVC...
            if pkt: #If there's a packet and the controller didn't return None
                self.popUpwindow = QWidget()
                self.p = PacketWindow(self.popUpwindow, pkt) 
                self.p.setupUi(self.popUpwindow)
                self.popUpwindow.show()

    def toggleUpdateView(self):
        toggleState = self.controller.toggleUpdateView()

        if toggleState:
            self.startCaptureButton.setText("STOP")
        elif not toggleState:
            self.startCaptureButton.setText("START")


    def addItemToPacketsListView(self, desc: str):
        item = QtGui.QStandardItem(desc)
        self.packetsListViewModel.appendRow(item)


class PacketWindow(PacketWindowUI):
    def __init__(self, window, pkt):
        super().__init__()

        self.window = window
        self.pkt = pkt

    def setupUi(self, Dialog):
        super().setupUi(Dialog)

        #Modify packet text
        self.contentTextEdit.textCursor().insertText(self.pkt.show(dump=True))

    def retranslateUi(self, Dialog):
        super().retranslateUi(Dialog)

        #Set the window title
        Dialog.setWindowTitle(QCoreApplication.translate("Dialog", f"Packet {self.pkt.index}", None))